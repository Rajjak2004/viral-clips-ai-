import React, { useState, useRef, useEffect } from 'react';
import {
  Upload, Video, Scissors, Download, Play, Settings,
  Zap, FileVideo, Camera, Share2, Star,
  Clock, AlertCircle, CheckCircle, X, Menu, Sun, Moon, User,
  Cloud
} from 'lucide-react';

function App() {
  const [darkMode, setDarkMode] = useState(false);
  const [theme, setTheme] = useState("purple");
  const [clips, setClips] = useState([]);
  const [videoUrl, setVideoUrl] = useState("");
  const [transcript, setTranscript] = useState("");
  const [settingsOpen, setSettingsOpen] = useState(false);
  const [apiKey, setApiKey] = useState(localStorage.getItem("apiKey") || "");

  const fileInputRef = useRef(null);

  // Handle upload
  const handleFileUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      mockGenerateClips(file.name);
    }
  };

  // Mock AI clip generation
  const mockGenerateClips = (source) => {
    const newClips = [
      { id: Date.now(), title: `Clip from ${source}`, score: Math.floor(Math.random() * 100), start: 0, end: 30, transcript: "Mock transcript text" }
    ];
    setClips([...clips, ...newClips]);
  };

  // Handle URL processing
  const processUrl = () => {
    if (videoUrl.includes("youtube") || videoUrl.includes("vimeo") || videoUrl.includes("tiktok") || videoUrl.includes("facebook")) {
      mockGenerateClips(videoUrl);
    } else {
      alert("Invalid URL, only YouTube, Vimeo, TikTok, Facebook supported.");
    }
  };

  // Mock AI transcript
  const generateTranscript = () => {
    setTranscript("This is a mock transcript generated by AI for demo purposes.");
  };

  // Download JSON clip data
  const downloadClip = (clip) => {
    const blob = new Blob([JSON.stringify(clip, null, 2)], { type: "application/json" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `${clip.title}.json`;
    link.click();
  };

  // Share functionality
  const shareClip = (clip) => {
    if (navigator.share) {
      navigator.share({ title: clip.title, text: "Check this viral clip!", url: window.location.href });
    } else {
      navigator.clipboard.writeText(window.location.href);
      alert("Link copied to clipboard");
    }
  };

  // Export to Drive/Dropbox mock
  const exportToCloud = (clip) => {
    alert(`Mock export of ${clip.title} to Google Drive/Dropbox`);
  };

  // Save API key
  const saveApiKey = () => {
    localStorage.setItem("apiKey", apiKey);
    alert("API Key saved");
    setSettingsOpen(false);
  };

  return (
    <> 
      <div className={`min-h-screen ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        {/* Header */}
        <header className={`p-4 flex justify-between items-center bg-${theme}-500`}>
          <h1 className={`text-2xl font-bold ${darkMode ? 'text-white' : 'text-gray-800'}`}>
            Viral Clips AI
          </h1>
          <div className="flex items-center gap-4">
            <button onClick={() => setDarkMode(!darkMode)}>
              {darkMode ? <Sun /> : <Moon />}
            </button>
            <button onClick={() => setSettingsOpen(!settingsOpen)}>
              <Settings />
            </button>
          </div>
        </header>

        {/* Settings Panel */}
        {settingsOpen && (
          <div className="p-4 border-b bg-white shadow-md">
            <h2 className="text-lg font-semibold">Settings</h2>
            <input className="p-2 border rounded w-full mt-2" type="text" placeholder="API Key" value={apiKey} onChange={(e) => setApiKey(e.target.value)} />
            <button className="mt-2 p-2 bg-blue-500 text-white rounded" onClick={saveApiKey}>Save API Key</button>

            <div className="mt-4">
              <label className="mr-2">Theme Color:</label>
              <select value={theme} onChange={(e) => setTheme(e.target.value)} className="p-2 border rounded">
                <option value="purple">Purple</option>
                <option value="blue">Blue</option>
                <option value="green">Green</option>
                <option value="red">Red</option>
              </select>
            </div>
          </div>
        )}

        {/* Main */}
        <main className="p-4 space-y-6">
          <h2 className={`text-xl ${darkMode ? 'text-purple-200' : 'text-gray-700'}`}>Upload & Edit Your Clips</h2>

          {/* Upload Section */}
          <div className="flex flex-col gap-4">
            <input type="file" accept="video/*" ref={fileInputRef} onChange={handleFileUpload} className="hidden" />
            <button onClick={() => fileInputRef.current.click()} className="p-2 bg-purple-500 text-white rounded-xl flex items-center gap-2">
              <Upload size={20} /> Upload Video
            </button>

            {/* Drag & Drop */}
            <div className="border-2 border-dashed p-6 rounded-lg text-center" onDrop={(e) => { e.preventDefault(); mockGenerateClips(e.dataTransfer.files[0].name); }} onDragOver={(e) => e.preventDefault()}>
              ðŸŽ¬ Drag & Drop Video Here
            </div>

            {/* URL Input */}
            <div className="flex gap-2">
              <input type="text" className="flex-1 p-2 border rounded" placeholder="Paste YouTube/Vimeo/TikTok/Facebook URL" value={videoUrl} onChange={(e) => setVideoUrl(e.target.value)} />
              <button onClick={processUrl} className="p-2 bg-blue-500 text-white rounded">Process</button>
            </div>
          </div>

          {/* Transcript */}
          <div>
            <button onClick={generateTranscript} className="p-2 bg-indigo-500 text-white rounded">Generate Transcript (Mock)</button>
            {transcript && <p className="mt-2 p-2 border rounded bg-gray-100">{transcript}</p>}
          </div>

          {/* Clips */}
          <div>
            <h3 className="text-lg font-semibold mb-2">Generated Clips</h3>
            {clips.length === 0 && <p>No clips yet.</p>}
            <div className="grid gap-4 md:grid-cols-2">
              {clips.map((clip) => (
                <div key={clip.id} className="p-4 border rounded shadow">
                  <h4 className="font-bold">{clip.title}</h4>
                  <p>Viral Score: {clip.score}%</p>

                  {/* Manual trim slider */}
                  <div className="flex items-center gap-2">
                    <label>Start:</label>
                    <input type="range" min="0" max="60" value={clip.start} onChange={(e) => { clip.start = e.target.value; setClips([...clips]); }} />
                    <label>End:</label>
                    <input type="range" min="0" max="120" value={clip.end} onChange={(e) => { clip.end = e.target.value; setClips([...clips]); }} />
                  </div>

                  <div className="flex gap-2 mt-2">
                    <button onClick={() => downloadClip(clip)} className="p-2 bg-green-500 text-white rounded flex items-center gap-1"><Download size={16}/>Download</button>
                    <button onClick={() => shareClip(clip)} className="p-2 bg-blue-500 text-white rounded flex items-center gap-1"><Share2 size={16}/>Share</button>
                    <button onClick={() => exportToCloud(clip)} className="p-2 bg-purple-500 text-white rounded flex items-center gap-1"><Cloud size={16}/>Export</button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </main>
      </div>
    </>
  );
}

export default App;
